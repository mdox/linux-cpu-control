#!/usr/bin/python3

from glob import glob
from pathlib import Path
from time import sleep

# Consts
TEMP_NORMAL: float = 50.0
TEMP_TOLERATED: float = 70.0
TEMP_CRITICAL: float = 90.0

# Vars
cpuinfo_minFreq: float = 0.0
cpuinfo_maxFreq: float = 0.0
cpuinfo_difFreq: float = 0.0


def cpu_getTemp() -> float:
    result: float = 0.0
    for filepath in glob("/sys/class/thermal/thermal_zone*/temp"):
        result = max(float(Path(filepath).read_text()), result)
    return result / 1000.0


def cpu_getGovernor() -> str:
    return Path("/sys/devices/system/cpu/cpu0/cpufreq/scaling_governor").read_text()


def cpu_getScalingMaxFreq() -> float:
    return float(Path("/sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq").read_text())


def cpu_setScalingMaxFreq(value):
    for filepath in glob("/sys/devices/system/cpu/cpu*/cpufreq/scaling_max_freq"):
        if int(Path(filepath).read_text()) != int(value):
            Path(filepath).write_text(str(int(value)))


def process():
    if (cpu_getGovernor() == "powersave"):
        return

    temp = cpu_getTemp()

    if (temp >= TEMP_TOLERATED):
        scale = (temp-TEMP_TOLERATED)/(TEMP_CRITICAL-TEMP_TOLERATED)
        cpu_setScalingMaxFreq(
            max(
                cpuinfo_minFreq,
                cpu_getScalingMaxFreq() - cpuinfo_difFreq * 0.1 * scale
            )
        )
    elif (temp >= TEMP_NORMAL):
        scale = (temp-TEMP_NORMAL)/(TEMP_TOLERATED-TEMP_NORMAL)
        cpu_setScalingMaxFreq(
            min(
                cpuinfo_maxFreq,
                cpu_getScalingMaxFreq() + cpuinfo_difFreq * 0.1 * scale
            )
        )
    else:
        cpu_setScalingMaxFreq(cpuinfo_maxFreq)


def main():
    global cpuinfo_minFreq, cpuinfo_maxFreq, cpuinfo_difFreq

    cpuinfo_minFreq = float(
        Path("/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_min_freq").read_text())
    cpuinfo_maxFreq = float(
        Path("/sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq").read_text())

    cpuinfo_difFreq = cpuinfo_maxFreq-cpuinfo_minFreq

    while True:
        process()
        sleep(1.0)


if __name__ == '__main__':
    main()
